{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/examples/01-single-selection-example/single-selection-example.component.ts","./src/app/examples/01-single-selection-example/single-selection-example.component.html","./src/app/examples/02-multiple-selection-example/multiple-selection-example.component.ts","./src/app/examples/02-multiple-selection-example/multiple-selection-example.component.html","./src/app/examples/03-custom-clear-icon-example/custom-clear-icon-example.component.ts","./src/app/examples/03-custom-clear-icon-example/custom-clear-icon-example.component.html","./src/app/examples/04-option-groups-example/option-groups-example.component.ts","./src/app/examples/04-option-groups-example/option-groups-example.component.html","./src/app/examples/05-server-side-search-example/server-side-search-example.component.ts","./src/app/examples/05-server-side-search-example/server-side-search-example.component.html","./src/app/examples/06-multiple-selection-select-all-example/multiple-selection-select-all-example.component.ts","./src/app/examples/06-multiple-selection-select-all-example/multiple-selection-select-all-example.component.html","./src/app/examples/07-tooltip-select-all-example/tooltip-select-all-example.component.ts","./src/app/examples/07-tooltip-select-all-example/tooltip-select-all-example.component.html","./src/app/examples/08-infinite-scroll-example/infinite-scroll-example.component.ts","./src/app/examples/08-infinite-scroll-example/infinite-scroll-example.component.html","./src/app/examples/09-custom-no-entries-found-example/custom-no-entries-found-example.component.ts","./src/app/examples/09-custom-no-entries-found-example/custom-no-entries-found-example.component.html","./src/app/examples/demo-data.ts","./src/app/mat-select-search/default-options.ts","./src/app/mat-select-search/mat-select-no-entries-found.directive.ts","./src/app/mat-select-search/mat-select-search-clear.directive.ts","./src/app/mat-select-search/mat-select-search-test.component.ts","./src/app/mat-select-search/mat-select-search-test.component.html","./src/app/mat-select-search/mat-select-search.component.ts","./src/app/mat-select-search/mat-select-search.component.html","./src/app/mat-select-search/ngx-mat-select-search.module.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { VERSION } from '@angular/material/core';\r\n\r\nimport { MatSelectSearchVersion } from './mat-select-search/ngx-mat-select-search.module';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n  styleUrls: ['app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  version = VERSION;\r\n\r\n  matSelectSearchVersion = MatSelectSearchVersion;\r\n\r\n  private rightToLeft = false;\r\n\r\n  toggleRightToLeft() {\r\n    this.rightToLeft = !this.rightToLeft;\r\n    document.body.dir = this.rightToLeft ? 'rtl' : '';\r\n  }\r\n\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n  Angular Material 2 App\r\n</mat-toolbar>\r\n<div class=\"basic-container\">\r\n  <h1>ngx-mat-select-search</h1>\r\n  <p>Angular component providing an input field for searching / filtering\r\n    <a href=\"https://material.angular.io/components/select/overview\" target=\"_blank\">MatSelect</a>\r\n    options of the <a href=\"https://material.angular.io\">Angular Material</a> library.</p>\r\n\r\n  <p><a href=\"https://github.com/bithost-gmbh/ngx-mat-select-search\" target=\"_blank\">https://github.com/bithost-gmbh/ngx-mat-select-search</a></p>\r\n\r\n  <h2>Examples</h2>\r\n\r\n  <app-single-selection-example></app-single-selection-example>\r\n\r\n  <app-multiple-selection-example></app-multiple-selection-example>\r\n\r\n  <app-custom-clear-icon-example></app-custom-clear-icon-example>\r\n\r\n  <app-custom-no-entries-found-example></app-custom-no-entries-found-example>\r\n\r\n  <app-option-groups-example></app-option-groups-example>\r\n\r\n  <app-server-side-search-example></app-server-side-search-example>\r\n\r\n  <app-multiple-selection-select-all-example></app-multiple-selection-select-all-example>\r\n\r\n  <app-tooltip-select-all-example></app-tooltip-select-all-example>\r\n\r\n  <div>\r\n    <mat-slide-toggle ngModel (ngModelChange)=\"toggleRightToLeft()\">Right-to-left</mat-slide-toggle>\r\n  </div>\r\n\r\n\r\n\r\n  <div class=\"version-info\">\r\n    ngx-mat-select-search Version: {{matSelectSearchVersion}} <br/>\r\n    Material Version: {{version.full}}\r\n  </div>\r\n\r\n\r\n</div>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatLegacyButtonModule } from '@angular/material/legacy-button';\r\nimport { MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\r\nimport { MatLegacySelectModule } from '@angular/material/legacy-select';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\n\r\nimport { NgxMatSelectSearchModule } from './mat-select-search/ngx-mat-select-search.module';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { SingleSelectionExampleComponent } from './examples/01-single-selection-example/single-selection-example.component';\r\nimport { MultipleSelectionExampleComponent } from './examples/02-multiple-selection-example/multiple-selection-example.component';\r\nimport { CustomClearIconExampleComponent } from './examples/03-custom-clear-icon-example/custom-clear-icon-example.component';\r\nimport { OptionGroupsExampleComponent } from './examples/04-option-groups-example/option-groups-example.component';\r\nimport { ServerSideSearchExampleComponent } from './examples/05-server-side-search-example/server-side-search-example.component';\r\nimport {\r\n  MultipleSelectionSelectAllExampleComponent\r\n} from './examples/06-multiple-selection-select-all-example/multiple-selection-select-all-example.component';\r\nimport { TooltipSelectAllExampleComponent } from './examples/07-tooltip-select-all-example/tooltip-select-all-example.component';\r\nimport { InfiniteScrollExampleComponent } from './examples/08-infinite-scroll-example/infinite-scroll-example.component';\r\nimport { CustomNoEntriesFoundExampleComponent } from './examples/09-custom-no-entries-found-example/custom-no-entries-found-example.component';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSelectSearchTestComponent } from './mat-select-search/mat-select-search-test.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    NgxMatSelectSearchModule,\r\n    MatSlideToggleModule,\r\n    // keeping it simpler with one module (MaterialModule) less,\r\n    MatLegacyButtonModule,\r\n    MatLegacyFormFieldModule,\r\n    MatIconModule,\r\n    MatLegacySelectModule,\r\n    MatToolbarModule\r\n  ],\r\n  exports: [\r\n    MatLegacyButtonModule,\r\n    MatLegacyFormFieldModule,\r\n    MatIconModule,\r\n    MatLegacySelectModule,\r\n    MatToolbarModule\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n    SingleSelectionExampleComponent,\r\n    MultipleSelectionExampleComponent,\r\n    CustomClearIconExampleComponent,\r\n    CustomNoEntriesFoundExampleComponent,\r\n    OptionGroupsExampleComponent,\r\n    ServerSideSearchExampleComponent,\r\n    MultipleSelectionSelectAllExampleComponent,\r\n    TooltipSelectAllExampleComponent,\r\n    InfiniteScrollExampleComponent,\r\n    MatSelectSearchTestComponent\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  providers: []\r\n})\r\nexport class AppModule {}\r\n","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\n\r\nimport { Bank, BANKS } from '../demo-data';\r\n\r\n\r\n@Component({\r\n  selector: 'app-single-selection-example',\r\n  templateUrl: './single-selection-example.component.html',\r\n  styleUrls: ['./single-selection-example.component.scss']\r\n})\r\nexport class SingleSelectionExampleComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  /** list of banks */\r\n  protected banks: Bank[] = BANKS;\r\n\r\n  /** control for the selected bank */\r\n  public bankCtrl: FormControl<Bank|null> = new FormControl<Bank|null>(null);\r\n\r\n  /** control for the MatSelect filter keyword */\r\n  public bankFilterCtrl: FormControl<string> = new FormControl<string>('', {nonNullable: true});\r\n\r\n  /** list of banks filtered by search keyword */\r\n  public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n\r\n  @ViewChild('singleSelect', { static: true }) singleSelect!: MatSelect;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    // set initial selection\r\n    this.bankCtrl.setValue(this.banks[10]);\r\n\r\n    // load the initial bank list\r\n    this.filteredBanks.next(this.banks.slice());\r\n\r\n    // listen for search field value changes\r\n    this.bankFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterBanks();\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  /**\r\n   * Sets the initial value after the filteredBanks are loaded initially\r\n   */\r\n  protected setInitialValue() {\r\n    this.filteredBanks\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.singleSelect.compareWith = (a: Bank, b: Bank) => a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  protected filterBanks() {\r\n    if (!this.banks) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.bankFilterCtrl.value;\r\n    if (!search) {\r\n      this.filteredBanks.next(this.banks.slice());\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredBanks.next(\r\n      this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n    );\r\n  }\r\n\r\n}\r\n","<h3>Single selection</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\" #singleSelect>\r\n      <mat-option>\r\n        <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\r\n      </mat-option>\r\n\r\n      <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Bank: {{bankCtrl.value?.name}}\r\n</p>\r\n","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { MatSelect } from '@angular/material/select';\r\n\r\nimport { Bank, BANKS } from '../demo-data';\r\n\r\n@Component({\r\n  selector: 'app-multiple-selection-example',\r\n  templateUrl: './multiple-selection-example.component.html',\r\n  styleUrls: ['./multiple-selection-example.component.scss']\r\n})\r\nexport class MultipleSelectionExampleComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  /** list of banks */\r\n  protected banks: Bank[] = BANKS;\r\n\r\n  /** control for the selected bank for multi-selection */\r\n  public bankMultiCtrl: FormControl<Bank[]> = new FormControl<Bank[]>([], {nonNullable: true});\r\n\r\n  /** control for the MatSelect filter keyword multi-selection */\r\n  public bankMultiFilterCtrl: FormControl<string> = new FormControl<string>('', {nonNullable:true});\r\n\r\n  /** list of banks filtered by search keyword */\r\n  public filteredBanksMulti: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n\r\n  @ViewChild('multiSelect', { static: true }) multiSelect!: MatSelect;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    // set initial selection\r\n    this.bankMultiCtrl.setValue([this.banks[10], this.banks[11], this.banks[12]]);\r\n\r\n    // load the initial bank list\r\n    this.filteredBanksMulti.next(this.banks.slice());\r\n\r\n    // listen for search field value changes\r\n    this.bankMultiFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterBanksMulti();\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  /**\r\n   * Sets the initial value after the filteredBanks are loaded initially\r\n   */\r\n  protected setInitialValue() {\r\n    this.filteredBanksMulti\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.multiSelect.compareWith = (a: Bank, b: Bank) => a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  protected filterBanksMulti() {\r\n    if (!this.banks) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.bankMultiFilterCtrl.value;\r\n    if (!search) {\r\n      this.filteredBanksMulti.next(this.banks.slice());\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredBanksMulti.next(\r\n      this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n    );\r\n  }\r\n\r\n}\r\n","\r\n<h3>Multiple selection</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankMultiCtrl\" placeholder=\"Banks\" [multiple]=\"true\" #multiSelect>\r\n      <mat-option>\r\n        <ngx-mat-select-search [formControl]=\"bankMultiFilterCtrl\"></ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredBanksMulti | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Banks:\r\n</p>\r\n<ul *ngFor=\"let bank of bankMultiCtrl?.value\">\r\n  <li>{{bank.name}}</li>\r\n</ul>\r\n","import { AfterViewInit, Component, OnDestroy, OnInit } from '@angular/core';\r\n\r\nimport { SingleSelectionExampleComponent } from '../01-single-selection-example/single-selection-example.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-custom-clear-icon-example',\r\n  templateUrl: './custom-clear-icon-example.component.html',\r\n  styleUrls: ['./custom-clear-icon-example.component.scss']\r\n})\r\nexport class CustomClearIconExampleComponent extends SingleSelectionExampleComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  // reuse all code of SingleSelectionComponent\r\n\r\n  override ngOnInit() {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  override ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n  override ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n}\r\n","<h3>Single selection with custom clear icon</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\" #singleSelect>\r\n      <mat-option>\r\n        <ngx-mat-select-search *ngIf=\"true\" [formControl]=\"bankFilterCtrl\" [preventHomeEndKeyPropagation]=\"true\">\r\n          <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\r\n        </ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Bank: {{bankCtrl.value?.name}}\r\n</p>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { FormControl } from '@angular/forms';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { Bank, BankGroup, BANKGROUPS } from '../demo-data';\r\n\r\n\r\n@Component({\r\n  selector: 'app-option-groups-example',\r\n  templateUrl: './option-groups-example.component.html',\r\n  styleUrls: ['./option-groups-example.component.scss']\r\n})\r\nexport class OptionGroupsExampleComponent implements OnInit, OnDestroy {\r\n\r\n  /** list of bank groups */\r\n  protected bankGroups: BankGroup[] = BANKGROUPS;\r\n\r\n  /** control for the selected bank for option groups */\r\n  public bankGroupsCtrl: FormControl<Bank|null> = new FormControl<Bank|null>(null);\r\n\r\n  /** control for the MatSelect filter keyword for option groups */\r\n  public bankGroupsFilterCtrl: FormControl<string> = new FormControl<string>('', {nonNullable:true});\r\n\r\n  /** list of bank groups filtered by search keyword for option groups */\r\n  public filteredBankGroups: ReplaySubject<BankGroup[]> = new ReplaySubject<BankGroup[]>(1);\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    // load the initial bank list\r\n    this.filteredBankGroups.next(this.copyBankGroups(this.bankGroups));\r\n\r\n    // listen for search field value changes\r\n    this.bankGroupsFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterBankGroups();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n\r\n  protected filterBankGroups() {\r\n    if (!this.bankGroups) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.bankGroupsFilterCtrl.value;\r\n    const bankGroupsCopy = this.copyBankGroups(this.bankGroups);\r\n    if (!search) {\r\n      this.filteredBankGroups.next(bankGroupsCopy);\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredBankGroups.next(\r\n      bankGroupsCopy.filter(bankGroup => {\r\n        const showBankGroup = bankGroup.name.toLowerCase().indexOf(search) > -1;\r\n        if (!showBankGroup) {\r\n          bankGroup.banks = bankGroup.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1);\r\n        }\r\n        return bankGroup.banks.length > 0;\r\n      })\r\n    );\r\n  }\r\n\r\n  protected copyBankGroups(bankGroups: BankGroup[]) {\r\n    const bankGroupsCopy: BankGroup[] = [];\r\n    bankGroups.forEach(bankGroup => {\r\n      bankGroupsCopy.push({\r\n        name: bankGroup.name,\r\n        banks: bankGroup.banks.slice()\r\n      });\r\n    });\r\n    return bankGroupsCopy;\r\n  }\r\n}\r\n","<h3>Single selection with option groups</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankGroupsCtrl\" placeholder=\"Bank\" #singleSelect>\r\n      <mat-option>\r\n        <ngx-mat-select-search [formControl]=\"bankGroupsFilterCtrl\"></ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-optgroup *ngFor=\"let group of filteredBankGroups | async\" [label]=\"group.name\">\r\n        <mat-option *ngFor=\"let bank of group.banks\" [value]=\"bank\">\r\n          {{bank.name}}\r\n        </mat-option>\r\n      </mat-optgroup>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Bank: {{bankGroupsCtrl.value?.name}}\r\n</p>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { debounceTime, delay, tap, filter, map, takeUntil } from 'rxjs/operators';\r\n\r\nimport { Bank, BANKS } from '../demo-data';\r\n\r\n\r\n@Component({\r\n  selector: 'app-server-side-search-example',\r\n  templateUrl: './server-side-search-example.component.html',\r\n  styleUrls: ['./server-side-search-example.component.scss']\r\n})\r\nexport class ServerSideSearchExampleComponent implements OnInit, OnDestroy {\r\n\r\n  /** list of banks */\r\n  protected banks: Bank[] = BANKS;\r\n\r\n  /** control for the selected bank for server side filtering */\r\n  public bankServerSideCtrl: FormControl<Bank|null> = new FormControl<Bank|null>(null);\r\n\r\n  /** control for filter for server side. */\r\n  public bankServerSideFilteringCtrl: FormControl<string> = new FormControl<string>('', {nonNullable: true});\r\n\r\n  /** indicate search operation is in progress */\r\n  public searching = false;\r\n\r\n  /** list of banks filtered after simulating server side search */\r\n  public  filteredServerSideBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _onDestroy = new Subject<void>();\r\n\r\n  ngOnInit() {\r\n\r\n    // listen for search field value changes\r\n    this.bankServerSideFilteringCtrl.valueChanges\r\n      .pipe(\r\n        filter(search => !!search),\r\n        tap(() => this.searching = true),\r\n        takeUntil(this._onDestroy),\r\n        debounceTime(200),\r\n        map(search => {\r\n          if (!this.banks) {\r\n            return [];\r\n          }\r\n\r\n          // simulate server fetching and filtering data\r\n          return this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1);\r\n        }),\r\n        delay(500),\r\n        takeUntil(this._onDestroy)\r\n      )\r\n      .subscribe(filteredBanks => {\r\n        this.searching = false;\r\n        this.filteredServerSideBanks.next(filteredBanks);\r\n      },\r\n        error => {\r\n          // no errors in our simulated example\r\n          this.searching = false;\r\n          // handle error...\r\n        });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n}\r\n","<h3>Server Side Search</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankServerSideCtrl\" placeholder=\"Bank\">\r\n      <!-- place ngx-mat-select-search inside mat-option to allow opening without initial selection -->\r\n      <mat-option>\r\n        <ngx-mat-select-search [formControl]=\"bankServerSideFilteringCtrl\" [searching]=\"searching\"></ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredServerSideBanks | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Bank: {{bankServerSideCtrl.value?.name}}\r\n</p>\r\n","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { MatSelect } from '@angular/material/select';\r\n\r\nimport { Bank, BANKS } from '../demo-data';\r\n\r\n@Component({\r\n  selector: 'app-multiple-selection-select-all-example',\r\n  templateUrl: './multiple-selection-select-all-example.component.html',\r\n  styleUrls: ['./multiple-selection-select-all-example.component.scss']\r\n})\r\nexport class MultipleSelectionSelectAllExampleComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  /** list of banks */\r\n  protected banks: Bank[] = BANKS;\r\n\r\n  /** control for the selected bank for multi-selection */\r\n  public bankMultiCtrl: FormControl<Bank[]> = new FormControl<Bank[]>([], {nonNullable:true});\r\n\r\n  /** control for the MatSelect filter keyword multi-selection */\r\n  public bankMultiFilterCtrl: FormControl<string> = new FormControl<string>('', {nonNullable: true});\r\n\r\n  /** list of banks filtered by search keyword */\r\n  public filteredBanksMulti: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n\r\n  /** local copy of filtered banks to help set the toggle all checkbox state */\r\n  protected filteredBanksCache: Bank[] = [];\r\n\r\n  /** flags to set the toggle all checkbox state */\r\n  isIndeterminate = false;\r\n  isChecked = false;\r\n\r\n  @ViewChild('multiSelect', { static: true }) multiSelect!: MatSelect;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    // set initial selection\r\n    this.bankMultiCtrl.setValue([this.banks[10], this.banks[11], this.banks[12]]);\r\n\r\n    // load the initial bank list\r\n    this.filteredBanksMulti.next(this.banks.slice());\r\n\r\n    // listen for search field value changes\r\n    this.bankMultiFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterBanksMulti();\r\n        this.setToggleAllCheckboxState();\r\n      });\r\n\r\n      // listen for multi select field value changes\r\n    this.bankMultiCtrl.valueChanges\r\n    .pipe(takeUntil(this._onDestroy)).subscribe(() => {\r\n      this.setToggleAllCheckboxState();\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  toggleSelectAll(selectAllValue: boolean) {\r\n    this.filteredBanksMulti.pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(val => {\r\n        if (selectAllValue) {\r\n          this.bankMultiCtrl.patchValue(val);\r\n        } else {\r\n          this.bankMultiCtrl.patchValue([]);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sets the initial value after the filteredBanks are loaded initially\r\n   */\r\n  protected setInitialValue() {\r\n    this.filteredBanksMulti\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.multiSelect.compareWith = (a: Bank, b: Bank) => a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  protected filterBanksMulti() {\r\n    if (!this.banks) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.bankMultiFilterCtrl.value;\r\n    if (!search) {\r\n      this.filteredBanksCache = this.banks.slice();\r\n      this.filteredBanksMulti.next(this.filteredBanksCache);\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredBanksCache = this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1);\r\n    this.filteredBanksMulti.next(this.filteredBanksCache);\r\n  }\r\n\r\n  protected setToggleAllCheckboxState() {\r\n    let filteredLength = 0;\r\n    if (this.bankMultiCtrl && this.bankMultiCtrl.value) {\r\n      this.filteredBanksCache.forEach(el => {\r\n        if (this.bankMultiCtrl.value.indexOf(el) > -1) {\r\n          filteredLength++;\r\n        }\r\n      });\r\n      this.isIndeterminate = filteredLength > 0 && filteredLength < this.filteredBanksCache.length;\r\n      this.isChecked = filteredLength > 0 && filteredLength === this.filteredBanksCache.length;\r\n    }\r\n  }\r\n\r\n}\r\n","\r\n<h3>Multiple selection with Select All Checkbox</h3>\r\n<p>\r\n  <mat-form-field color=\"accent\">\r\n    <mat-select [formControl]=\"bankMultiCtrl\" placeholder=\"Banks\" [multiple]=\"true\" #multiSelect>\r\n      <mat-option>\r\n        <ngx-mat-select-search [showToggleAllCheckbox]=\"true\"\r\n                               [toggleAllCheckboxIndeterminate]=\"isIndeterminate\"\r\n                               [toggleAllCheckboxChecked]=\"isChecked\"\r\n                               (toggleAll)=\"toggleSelectAll($event)\"\r\n                               [formControl]=\"bankMultiFilterCtrl\"></ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredBanksMulti | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Banks:\r\n</p>\r\n<ul *ngFor=\"let bank of bankMultiCtrl?.value\">\r\n  <li>{{bank.name}}</li>\r\n</ul>\r\n","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { MatSelect } from '@angular/material/select';\r\n\r\nimport { Bank, BANKS } from '../demo-data';\r\n\r\n@Component({\r\n  selector: 'app-tooltip-select-all-example',\r\n  templateUrl: './tooltip-select-all-example.component.html',\r\n  styleUrls: ['./tooltip-select-all-example.component.scss']\r\n})\r\nexport class TooltipSelectAllExampleComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  /** list of banks */\r\n  protected banks: Bank[] = BANKS;\r\n\r\n  /** control for the selected bank for multi-selection */\r\n  public bankMultiCtrl: FormControl<Bank[]> = new FormControl<Bank[]>([], {nonNullable:true});\r\n\r\n  /** control for the MatSelect filter keyword multi-selection */\r\n  public bankMultiFilterCtrl: FormControl<string> = new FormControl<string>('', {nonNullable:true});\r\n\r\n  /** list of banks filtered by search keyword */\r\n  public filteredBanksMulti: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n\r\n  public tooltipMessage = 'Select All / Unselect All';\r\n\r\n  @ViewChild('multiSelect', { static: true }) multiSelect!: MatSelect;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    // set initial selection\r\n    this.bankMultiCtrl.setValue([this.banks[10], this.banks[11], this.banks[12]]);\r\n\r\n    // load the initial bank list\r\n    this.filteredBanksMulti.next(this.banks.slice());\r\n\r\n    // listen for search field value changes\r\n    this.bankMultiFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterBanksMulti();\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  toggleSelectAll(selectAllValue: boolean) {\r\n    this.filteredBanksMulti\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        if (selectAllValue) {\r\n          this.bankMultiCtrl.patchValue([...this.banks]);\r\n        } else {\r\n          this.bankMultiCtrl.patchValue([]);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sets the initial value after the filteredBanks are loaded initially\r\n   */\r\n  protected setInitialValue() {\r\n    this.filteredBanksMulti\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.multiSelect.compareWith = (a: Bank, b: Bank) => a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  protected filterBanksMulti() {\r\n    if (!this.banks) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.bankMultiFilterCtrl.value;\r\n    if (!search) {\r\n      this.filteredBanksMulti.next(this.banks.slice());\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredBanksMulti.next(\r\n      this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n    );\r\n  }\r\n\r\n}\r\n","<h3>Tooltip on the Select All Checkbox</h3>\r\n<p>\r\n  <mat-form-field color=\"accent\">\r\n    <mat-select [formControl]=\"bankMultiCtrl\" placeholder=\"Banks\" [multiple]=\"true\" #multiSelect>\r\n      <mat-option>\r\n        <ngx-mat-select-search [showToggleAllCheckbox]=\"true\" (toggleAll)=\"toggleSelectAll($event)\"\r\n          [formControl]=\"bankMultiFilterCtrl\" [toggleAllCheckboxTooltipMessage]=\"tooltipMessage\"\r\n          [toggleAllCheckboxTooltipPosition]=\"'above'\"></ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredBanksMulti | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { combineLatest, merge, Observable, Subject } from 'rxjs';\r\nimport { map, mapTo, scan, startWith, takeUntil } from 'rxjs/operators';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { Bank } from '../demo-data';\r\n\r\n/**\r\n * Based upon: https://stackblitz.com/edit/mat-select-search-with-infinity-scroll\r\n */\r\n@Component({\r\n  selector: 'app-infinite-scroll-example',\r\n  templateUrl: './infinite-scroll-example.component.html',\r\n  styleUrls: ['./infinite-scroll-example.component.scss']\r\n})\r\nexport class InfiniteScrollExampleComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild('matSelectInfiniteScroll', { static: true } )\r\n  infiniteScrollSelect!: MatSelect;\r\n\r\n  /** control for the MatSelect filter keyword */\r\n  public searchCtrl: FormControl<string> = new FormControl<string>('', {nonNullable: true});\r\n\r\n  /** list with all available data, mocks some sort of backend data source */\r\n  private mockBankList: Bank[] = Array.from({ length: 1000 }).map((_, i) => ({\r\n    id: String(i),\r\n    name: `Bank ${i}`\r\n  }));\r\n\r\n  /** control for the selected bank id */\r\n  public bankCtrl: FormControl<string|null> = new FormControl<string|null>(null);\r\n\r\n  /** control for the MatSelect filter keyword */\r\n  public bankFilterCtrl: FormControl<string> = new FormControl<string>('', {nonNullable: true});\r\n\r\n  /** list of data corresponding to the search input */\r\n  private filteredData$: Observable<Bank[]> = this.bankFilterCtrl.valueChanges.pipe(\r\n    startWith(''),\r\n    map(searchKeyword => {\r\n      if (!searchKeyword) {\r\n        return this.mockBankList;\r\n      }\r\n      return this.mockBankList.filter((bank) =>\r\n        bank.name.toLowerCase().indexOf(searchKeyword.toLowerCase()) > -1\r\n      );\r\n    })\r\n  );\r\n\r\n  /** number of items added per batch */\r\n  batchSize = 20;\r\n\r\n  private incrementBatchOffset$: Subject<void> = new Subject<void>();\r\n  private resetBatchOffset$: Subject<void> = new Subject<void>();\r\n\r\n  /** minimum offset needed for the batch to ensure the selected option is displayed */\r\n  private minimumBatchOffset$: Observable<number> = combineLatest([\r\n    this.filteredData$,\r\n    this.bankFilterCtrl.valueChanges\r\n  ]).pipe(\r\n    map(([filteredData, searchValue]) => {\r\n      if (!this.bankFilterCtrl.value && this.bankCtrl.value) {\r\n        const index = filteredData.findIndex(bank => bank.id === this.bankCtrl.value);\r\n        return index + this.batchSize;\r\n      } else {\r\n        return 0;\r\n      }\r\n    }),\r\n    startWith(0)\r\n  );\r\n\r\n  /** length of the visible data / start of the next batch */\r\n  private batchOffset$ = combineLatest([\r\n    merge(\r\n      this.incrementBatchOffset$.pipe(mapTo(true)),\r\n      this.resetBatchOffset$.pipe(mapTo(false))\r\n    ),\r\n    this.minimumBatchOffset$\r\n  ]).pipe(\r\n    scan((batchOffset, [doIncrement, minimumOffset]) => {\r\n      if (doIncrement) {\r\n        return Math.max(batchOffset + this.batchSize, minimumOffset + this.batchSize);\r\n      } else {\r\n        return Math.max(minimumOffset, this.batchSize);\r\n      }\r\n    }, this.batchSize),\r\n  );\r\n\r\n\r\n  /** list of data, filtered by the search keyword, limited to the length accumulated by infinity scrolling */\r\n  filteredBatchedData$: Observable<Bank[]> = combineLatest([\r\n    this.filteredData$,\r\n    this.batchOffset$\r\n  ]).pipe(\r\n    map(([filteredData, batchOffset]) => filteredData.slice(0, batchOffset))\r\n  );\r\n\r\n  private destroy$: Subject<void> = new Subject<void>();\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.infiniteScrollSelect.openedChange.pipe(takeUntil(this.destroy$)).subscribe(opened => {\r\n      // after opening, reset the batch offset\r\n      if (opened) {\r\n        this.resetBatchOffset$.next();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n  }\r\n\r\n  /**\r\n   * Load the next batch\r\n   */\r\n  getNextBatch(): void {\r\n    this.incrementBatchOffset$.next();\r\n  }\r\n\r\n}\r\n","<h3>Integration with <a href=\"https://github.com/HaidarZ/ng-mat-select-infinite-scroll\" target=\"_blank\">ng-mat-select-infinite-scroll</a>\r\n</h3>\r\n\r\n<p>\r\n  Selected Bank: {{bankCtrl.value}}\r\n</p>\r\n\r\n<!-- Disabled due to incompatibility of ng-mat-select-infinite-scroll with Angular 13. -->\r\n\r\n<mat-form-field>\r\n  <mat-select #matSelectInfiniteScroll\r\n              msInfiniteScroll\r\n              (infiniteScroll)=\"getNextBatch()\"\r\n              [formControl]=\"bankCtrl\"\r\n              placeholder=\"Select Something\">\r\n    <mat-option>\r\n      // disableScrollToActiveOnOptionsChanged should be set to true\r\n      <ngx-mat-select-search\r\n        [formControl]=\"searchCtrl\"\r\n        placeholderLabel=\"search\"\r\n        [disableScrollToActiveOnOptionsChanged]=\"true\"\r\n        noEntriesFoundLabel=\"No entry matches\">\r\n      </ngx-mat-select-search>\r\n    </mat-option>\r\n    <mat-option *ngFor=\"let bank of filteredBatchedData$ | async\"\r\n                [value]=\"bank.id\">\r\n      {{bank.name}}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Bank, BANKS } from '../demo-data';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-custom-no-entries-found-example',\r\n  templateUrl: './custom-no-entries-found-example.component.html',\r\n  styleUrls: ['./custom-no-entries-found-example.component.scss']\r\n})\r\nexport class CustomNoEntriesFoundExampleComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  /** list of banks */\r\n  protected banks: Bank[] = BANKS;\r\n\r\n  /** control for the selected bank */\r\n  public bankCtrl: FormControl<Bank|null> = new FormControl<Bank|null>(null);\r\n\r\n  /** control for the MatSelect filter keyword */\r\n  public bankFilterCtrl: FormControl<string> = new FormControl<string>('', {nonNullable: true});\r\n\r\n  /** list of banks filtered by search keyword */\r\n  public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n\r\n  @ViewChild('singleSelect', { static: true }) singleSelect!: MatSelect;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  protected _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    // set initial selection\r\n    this.bankCtrl.setValue(this.banks[10]);\r\n\r\n    // load the initial bank list\r\n    this.filteredBanks.next(this.banks.slice());\r\n\r\n    // listen for search field value changes\r\n    this.bankFilterCtrl.valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        this.filterBanks();\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setInitialValue();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  /**\r\n   * Sets the initial value after the filteredBanks are loaded initially\r\n   */\r\n  protected setInitialValue() {\r\n    this.filteredBanks\r\n      .pipe(take(1), takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        // setting the compareWith property to a comparison function\r\n        // triggers initializing the selection according to the initial value of\r\n        // the form control (i.e. _initializeSelection())\r\n        // this needs to be done after the filteredBanks are loaded initially\r\n        // and after the mat-option elements are available\r\n        this.singleSelect.compareWith = (a: Bank, b: Bank) => a && b && a.id === b.id;\r\n      });\r\n  }\r\n\r\n  protected filterBanks() {\r\n    if (!this.banks) {\r\n      return;\r\n    }\r\n    // get the search keyword\r\n    let search = this.bankFilterCtrl.value;\r\n    if (!search) {\r\n      this.filteredBanks.next(this.banks.slice());\r\n      return;\r\n    } else {\r\n      search = search.toLowerCase();\r\n    }\r\n    // filter the banks\r\n    this.filteredBanks.next(\r\n      this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n    );\r\n  }\r\n}\r\n","<h3>Single selection with custom no entries found element</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\" #singleSelect>\r\n      <mat-option>\r\n        <ngx-mat-select-search *ngIf=\"true\" [formControl]=\"bankFilterCtrl\" [preventHomeEndKeyPropagation]=\"true\">\r\n          <span ngxMatSelectNoEntriesFound>\r\n            No entries found\r\n            <button mat-button color=\"primary\">\r\n              Add <mat-icon>add</mat-icon>\r\n            </button>\r\n          </span>\r\n        </ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Bank: {{bankCtrl.value?.name}}\r\n</p>\r\n","\r\nexport interface Bank {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface BankGroup {\r\n  name: string;\r\n  banks: Bank[];\r\n}\r\n\r\n\r\n/** list of banks */\r\nexport const BANKS: Bank[] = [\r\n  {name: 'Bank A (Switzerland)', id: 'A'},\r\n  {name: 'Bank B (Switzerland)', id: 'B'},\r\n  {name: 'Bank C (France)', id: 'C'},\r\n  {name: 'Bank D (France)', id: 'D'},\r\n  {name: 'Bank E (France)', id: 'E'},\r\n  {name: 'Bank F (Italy)', id: 'F'},\r\n  {name: 'Bank G (Italy)', id: 'G'},\r\n  {name: 'Bank H (Italy)', id: 'H'},\r\n  {name: 'Bank I (Italy)', id: 'I'},\r\n  {name: 'Bank J (Italy)', id: 'J'},\r\n  {name: 'Bank Kolombia (United States of America)', id: 'K'},\r\n  {name: 'Bank L (Germany)', id: 'L'},\r\n  {name: 'Bank M (Germany)', id: 'M'},\r\n  {name: 'Bank N (Germany)', id: 'N'},\r\n  {name: 'Bank O (Germany)', id: 'O'},\r\n  {name: 'Bank P (Germany)', id: 'P'},\r\n  {name: 'Bank Q (Germany)', id: 'Q'},\r\n  {name: 'Bank R (Germany)', id: 'R'}\r\n];\r\n\r\n/** list of bank groups */\r\nexport const BANKGROUPS: BankGroup[] = [\r\n  {\r\n    name: 'Switzerland',\r\n    banks: [\r\n      {name: 'Bank A', id: 'A'},\r\n      {name: 'Bank B', id: 'B'}\r\n    ]\r\n  },\r\n  {\r\n    name: 'France',\r\n    banks: [\r\n      {name: 'Bank C', id: 'C'},\r\n      {name: 'Bank D', id: 'D'},\r\n      {name: 'Bank E', id: 'E'},\r\n    ]\r\n  },\r\n  {\r\n    name: 'Italy',\r\n    banks: [\r\n      {name: 'Bank F', id: 'F'},\r\n      {name: 'Bank G', id: 'G'},\r\n      {name: 'Bank H', id: 'H'},\r\n      {name: 'Bank I', id: 'I'},\r\n      {name: 'Bank J', id: 'J'},\r\n    ]\r\n  },\r\n  {\r\n    name: 'United States of America',\r\n    banks: [\r\n      {name: 'Bank Kolombia', id: 'K'},\r\n    ]\r\n  },\r\n  {\r\n    name: 'Germany',\r\n    banks: [\r\n      {name: 'Bank L', id: 'L'},\r\n      {name: 'Bank M', id: 'M'},\r\n      {name: 'Bank N', id: 'N'},\r\n      {name: 'Bank O', id: 'O'},\r\n      {name: 'Bank P', id: 'P'},\r\n      {name: 'Bank Q', id: 'Q'},\r\n      {name: 'Bank R', id: 'R'}\r\n    ]\r\n  }\r\n];\r\n","import { InjectionToken } from '@angular/core';\r\nimport { MatSelectSearchComponent } from './mat-select-search.component';\r\n\r\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\r\nexport const configurableDefaultOptions = [\r\n  'ariaLabel',\r\n  'clearSearchInput',\r\n  'closeIcon',\r\n  'closeSvgIcon',\r\n  'disableInitialFocus',\r\n  'disableScrollToActiveOnOptionsChanged',\r\n  'enableClearOnEscapePressed',\r\n  'hideClearSearchButton',\r\n  'noEntriesFoundLabel',\r\n  'placeholderLabel',\r\n  'preventHomeEndKeyPropagation',\r\n  'searching',\r\n] as const;\r\n\r\nexport type ConfigurableDefaultOptions = typeof configurableDefaultOptions[number];\r\n\r\n/**\r\n * InjectionToken that can be used to specify global options. e.g.\r\n *\r\n * ```typescript\r\n * providers: [\r\n *   {\r\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\r\n *     useValue: <MatSelectSearchOptions>{\r\n *       closeIcon: 'delete',\r\n *       noEntriesFoundLabel: 'No options found'\r\n *     }\r\n *   }\r\n * ]\r\n * ```\r\n *\r\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\r\n */\r\nexport const MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken<MatSelectSearchOptions>('mat-selectsearch-default-options');\r\n\r\n/** Global configurable options for MatSelectSearch. */\r\nexport type MatSelectSearchOptions = Readonly<Partial<Pick<MatSelectSearchComponent, ConfigurableDefaultOptions>>>;\r\n","import { Directive } from '@angular/core';\r\n\r\n/**\r\n * Directive for providing a custom no entries found element.\r\n * e.g.\r\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\r\n *   <span ngxMatSelectNoEntriesFound>\r\n *     No entries found <button>Add</button>\r\n *   </span>\r\n * </ngx-mat-select-search>\r\n */\r\n@Directive({\r\n  selector: '[ngxMatSelectNoEntriesFound]'\r\n})\r\nexport class MatSelectNoEntriesFoundDirective {}\r\n","import { Directive } from '@angular/core';\r\n\r\n/**\r\n * Directive for providing a custom clear-icon.\r\n * e.g.\r\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\r\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\r\n * </ngx-mat-select-search>\r\n */\r\n@Directive({\r\n    selector: '[ngxMatSelectSearchClear]'\r\n})\r\nexport class MatSelectSearchClearDirective {}\r\n","import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatLegacySelect } from '@angular/material/legacy-select';\r\nimport { MatSelectSearchComponent } from './mat-select-search.component';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { Subject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n\r\nexport interface Bank {\r\n    id: string;\r\n    name: string;\r\n  }\r\n\r\n  @Component({\r\n    selector: 'mat-select-search-test',\r\n    templateUrl: './mat-select-search-test.component.html',\r\n  })\r\n  export class MatSelectSearchTestComponent implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n    @ViewChild('selectSingle') matSelect!: MatLegacySelect;\r\n    @ViewChild('selectSingleMatOption') matSelectMatOption!: MatLegacySelect;\r\n    @ViewChild('selectMulti') matSelectMulti!: MatLegacySelect;\r\n    @ViewChild('selectSearchSingle') matSelectSearch!: MatSelectSearchComponent;\r\n    @ViewChild('selectSearchSingleMatOption') matSelectSearchMatOption!: MatSelectSearchComponent;\r\n    @ViewChild('selectSearchMulti') matSelectSearchMulti!: MatSelectSearchComponent;\r\n\r\n    // control for the selected bank\r\n    public bankCtrl: UntypedFormControl = new UntypedFormControl();\r\n    // control for the selected bank\r\n    public bankCtrlMatOption: UntypedFormControl = new UntypedFormControl();\r\n    // control for the MatLegacySelect filter keyword\r\n    public bankFilterCtrl: UntypedFormControl = new UntypedFormControl();\r\n    // control for the MatLegacySelect filter keyword\r\n    public bankFilterCtrlMatOption: UntypedFormControl = new UntypedFormControl();\r\n\r\n    /** control for the selected bank for multi-selection */\r\n    public bankMultiCtrl: UntypedFormControl = new UntypedFormControl();\r\n\r\n    /** control for the MatLegacySelect filter keyword multi-selection */\r\n    public bankMultiFilterCtrl: UntypedFormControl = new UntypedFormControl();\r\n\r\n\r\n    // list of banks\r\n    public banks: Bank[] = [\r\n      {name: 'Bank A', id: 'A'},\r\n      {name: 'Bank B', id: 'B'},\r\n      {name: 'Bank C', id: 'C'},\r\n      {name: 'Bank DC', id: 'DC'}];\r\n\r\n    public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n    public filteredBanksMatOption: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n\r\n    /** list of banks filtered by search keyword for multi-selection */\r\n    public filteredBanksMulti: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n\r\n    public initialSingleSelection: Bank | null = null;\r\n    public initialSingleSelectionMatOption: Bank | null = null;\r\n    public initialMultiSelection: Bank[] = [];\r\n\r\n\r\n    // Subject that emits when the component has been destroyed.\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    ngOnInit() {\r\n      // set initial selection\r\n      if (this.initialSingleSelection) {\r\n        this.bankCtrl.setValue(this.initialSingleSelection);\r\n      }\r\n      if (this.initialSingleSelectionMatOption) {\r\n        this.bankCtrlMatOption.setValue(this.initialSingleSelectionMatOption);\r\n      }\r\n      if (this.initialMultiSelection) {\r\n        this.bankMultiCtrl.setValue(this.initialMultiSelection);\r\n      }\r\n\r\n      // load the initial bank list\r\n      this.filteredBanks.next(this.banks.slice());\r\n      this.filteredBanksMatOption.next(this.banks.slice());\r\n      this.filteredBanksMulti.next(this.banks.slice());\r\n\r\n      // listen for search field value changes\r\n      this.bankFilterCtrl.valueChanges\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(() => {\r\n          this.filterBanks();\r\n        });\r\n      this.bankFilterCtrlMatOption.valueChanges\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(() => {\r\n          this.filterBanksMatOption();\r\n        });\r\n      this.bankMultiFilterCtrl.valueChanges\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(() => {\r\n          this.filterBanksMulti();\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      this.setInitialValue();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n      this._onDestroy.next();\r\n      this._onDestroy.complete();\r\n    }\r\n\r\n    /**\r\n     * Sets the initial value after the filteredBanks are loaded initially\r\n     */\r\n    private setInitialValue() {\r\n      this.filteredBanks\r\n        .pipe(take(1), takeUntil(this._onDestroy))\r\n        .subscribe(() => {\r\n          // setting the compareWith property to a comparison function\r\n          // triggers initializing the selection according to the initial value of\r\n          // the form control (i.e. _initializeSelection())\r\n          // this needs to be done after the filteredBanks are loaded initially\r\n          // and after the mat-option elements are available\r\n          this.matSelect.compareWith = (a: Bank, b: Bank) => a && b && ('id' in a) && ('id' in b) && a['id'] === b['id'];\r\n          this.matSelectMatOption.compareWith = (a: Bank, b: Bank) => a && b && ('id' in a) && ('id' in b) && a['id'] === b['id'];\r\n          this.matSelectMulti.compareWith = (a: Bank, b: Bank) => a && b && ('id' in a) && ('id' in b) && a['id'] === b['id'];\r\n        });\r\n    }\r\n\r\n    private filterBanks() {\r\n      if (!this.banks) {\r\n        return;\r\n      }\r\n\r\n      // get the search keyword\r\n      let search = this.bankFilterCtrl.value;\r\n      if (!search) {\r\n        this.filteredBanks.next(this.banks.slice());\r\n        return;\r\n      } else {\r\n        search = search.toLowerCase();\r\n      }\r\n\r\n      // filter the banks\r\n      this.filteredBanks.next(\r\n        this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n      );\r\n    }\r\n\r\n    private filterBanksMatOption() {\r\n      if (!this.banks) {\r\n        return;\r\n      }\r\n\r\n      // get the search keyword\r\n      let search = this.bankFilterCtrlMatOption.value;\r\n      if (!search) {\r\n        this.filteredBanksMatOption.next(this.banks.slice());\r\n        return;\r\n      } else {\r\n        search = search.toLowerCase();\r\n      }\r\n\r\n      // filter the banks\r\n      this.filteredBanksMatOption.next(\r\n        this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n      );\r\n    }\r\n\r\n\r\n    private filterBanksMulti() {\r\n      if (!this.banks) {\r\n        return;\r\n      }\r\n      // get the search keyword\r\n      let search = this.bankMultiFilterCtrl.value;\r\n      if (!search) {\r\n        this.filteredBanksMulti.next(this.banks.slice());\r\n        return;\r\n      } else {\r\n        search = search.toLowerCase();\r\n      }\r\n      // filter the banks\r\n      this.filteredBanksMulti.next(\r\n        this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n      );\r\n    }\r\n  }","<h3>Single selection</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\" #selectSingle>\r\n      <mat-option>\r\n        <ngx-mat-select-search [formControl]=\"bankFilterCtrl\" #selectSearchSingle></ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Bank: {{bankCtrl.value?.name}}\r\n</p>\r\n\r\n<h3>Single selection inside mat-option</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankCtrlMatOption\" placeholder=\"Bank\" #selectSingleMatOption>\r\n      <mat-option>\r\n        <ngx-mat-select-search [formControl]=\"bankFilterCtrlMatOption\"\r\n                               #selectSearchSingleMatOption></ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredBanksMatOption | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Bank: {{bankCtrlMatOption.value?.name}}\r\n</p>\r\n\r\n<h3>Multiple selection</h3>\r\n<p>\r\n  <mat-form-field>\r\n    <mat-select [formControl]=\"bankMultiCtrl\" placeholder=\"Banks\" [multiple]=\"true\" #selectMulti>\r\n      <mat-option>\r\n        <ngx-mat-select-search [formControl]=\"bankMultiFilterCtrl\" #selectSearchMulti></ngx-mat-select-search>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let bank of filteredBanksMulti | async\" [value]=\"bank\">\r\n        {{bank.name}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</p>\r\n<p>\r\n  Selected Banks:\r\n</p>\r\n<ul *ngFor=\"let bank of bankMultiCtrl?.value\">\r\n  <li>{{bank.name}}</li>\r\n</ul>","/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { A, DOWN_ARROW, END, ENTER, ESCAPE, HOME, NINE, SPACE, UP_ARROW, Z, ZERO } from '@angular/cdk/keycodes';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  Host,\r\n  SkipSelf\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MatLegacyOption } from '@angular/material/legacy-core';\r\n\r\n\r\n// import { MatLegacyFormFieldModule as MatFormFieldModule } from '@angular/material/legacy-form-field';\r\nimport { MatLegacyFormField as MatFormField } from '@angular/material/legacy-form-field';\r\nimport { MatLegacySelect  } from '@angular/material/legacy-select';\r\n\r\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport { delay, filter, map, startWith, switchMap, take, takeUntil, tap } from 'rxjs/operators';\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\nimport { configurableDefaultOptions, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectSearchOptions } from './default-options';\r\nimport { MatSelectNoEntriesFoundDirective } from './mat-select-no-entries-found.directive';\r\n\r\n/* tslint:disable:member-ordering component-selector */\r\n/**\r\n * Component providing an input field for searching MatLegacySelect options.\r\n *\r\n * Example usage:\r\n *\r\n * interface Bank {\r\n *  id: string;\r\n *  name: string;\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-app-data-selection',\r\n *   template: `\r\n *     <mat-form-field>\r\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\r\n *         <mat-option>\r\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\r\n *         </mat-option>\r\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\r\n *           {{bank.name}}\r\n *         </mat-option>\r\n *       </mat-select>\r\n *     </mat-form-field>\r\n *   `\r\n * })\r\n * export class DataSelectionComponent implements OnInit, OnDestroy {\r\n *\r\n *   // control for the selected bank\r\n *   public bankCtrl: FormControl = new FormControl();\r\n *   // control for the MatLegacySelect filter keyword\r\n *   public bankFilterCtrl: FormControl = new FormControl();\r\n *\r\n *   // list of banks\r\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\r\n *   // list of banks filtered by search keyword\r\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n *\r\n *   // Subject that emits when the component has been destroyed.\r\n *   private _onDestroy = new Subject<void>();\r\n *\r\n *\r\n *   ngOnInit() {\r\n *     // load the initial bank list\r\n *     this.filteredBanks.next(this.banks.slice());\r\n *     // listen for search field value changes\r\n *     this.bankFilterCtrl.valueChanges\r\n *       .pipe(takeUntil(this._onDestroy))\r\n *       .subscribe(() => {\r\n *         this.filterBanks();\r\n *       });\r\n *   }\r\n *\r\n *   ngOnDestroy() {\r\n *     this._onDestroy.next();\r\n *     this._onDestroy.complete();\r\n *   }\r\n *\r\n *   private filterBanks() {\r\n *     if (!this.banks) {\r\n *       return;\r\n *     }\r\n *\r\n *     // get the search keyword\r\n *     let search = this.bankFilterCtrl.value;\r\n *     if (!search) {\r\n *       this.filteredBanks.next(this.banks.slice());\r\n *       return;\r\n *     } else {\r\n *       search = search.toLowerCase();\r\n *     }\r\n *\r\n *     // filter the banks\r\n *     this.filteredBanks.next(\r\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n *     );\r\n *   }\r\n * }\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-select-search',\r\n  templateUrl: './mat-select-search.component.html',\r\n  styleUrls: ['./mat-select-search.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSelectSearchComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  /** Label of the search placeholder */\r\n  @Input() placeholderLabel = 'Suche';\r\n\r\n  /** Type of the search input field */\r\n  @Input() type = 'text';\r\n\r\n  /** Font-based icon used for displaying Close-Icon */\r\n  @Input() closeIcon = 'close';\r\n\r\n  /** Svg-based icon used for displaying Close-Icon. If set, closeIcon is overridden */\r\n  @Input() closeSvgIcon?: string;\r\n\r\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\r\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\r\n\r\n  /**\r\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\r\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\r\n    */\r\n  @Input() clearSearchInput = true;\r\n\r\n  /** Whether to show the search-in-progress indicator */\r\n  @Input() searching = false;\r\n\r\n  /** Disables initial focusing of the input field */\r\n  @Input() disableInitialFocus = false;\r\n\r\n  /** Enable clear input on escape pressed */\r\n  @Input() enableClearOnEscapePressed = false;\r\n\r\n  /**\r\n   * Prevents home / end key being propagated to mat-select,\r\n   * allowing to move the cursor within the search input instead of navigating the options\r\n   */\r\n  @Input() preventHomeEndKeyPropagation = false;\r\n\r\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\r\n  @Input() disableScrollToActiveOnOptionsChanged = false;\r\n\r\n  /** Adds 508 screen reader support for search box */\r\n  @Input() ariaLabel = 'dropdown search';\r\n\r\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\r\n  @Input() showToggleAllCheckbox = false;\r\n\r\n  /** select all checkbox checked state */\r\n  @Input() toggleAllCheckboxChecked = false;\r\n\r\n  /** select all checkbox indeterminate state */\r\n  @Input() toggleAllCheckboxIndeterminate = false;\r\n\r\n  /** Display a message in a tooltip on the toggle-all checkbox */\r\n  @Input() toggleAllCheckboxTooltipMessage = '';\r\n\r\n  /** Define the position of the tooltip on the toggle-all checkbox. */\r\n  @Input() toggleAllCheckboxTooltipPosition: 'left' | 'right' | 'above' | 'below' | 'before' | 'after' = 'below';\r\n\r\n  /** Show/Hide the search clear button of the search input */\r\n  @Input() hideClearSearchButton = false;\r\n\r\n  /**\r\n   * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\r\n   * Defaults to false, so selected options are only restored while filtering is active.\r\n   */\r\n  @Input() alwaysRestoreSelectedOptionsMulti = false;\r\n\r\n  /** Output emitter to send to parent component with the toggle all boolean */\r\n  @Output() toggleAll = new EventEmitter<boolean>();\r\n\r\n  /** Reference to the search input field */\r\n  @ViewChild('searchSelectInput', { read: ElementRef, static: true }) searchSelectInput!: ElementRef;\r\n\r\n  /** Reference to the search input field */\r\n  @ViewChild('innerSelectSearch', { read: ElementRef, static: true }) innerSelectSearch!: ElementRef;\r\n\r\n  /** Reference to custom search input clear icon */\r\n  @ContentChild(MatSelectSearchClearDirective) clearIcon!: MatSelectSearchClearDirective;\r\n\r\n  /** Reference to custom no entries found element */\r\n  @ContentChild(MatSelectNoEntriesFoundDirective) noEntriesFound!: MatSelectNoEntriesFoundDirective;\r\n\r\n  /** Current search value */\r\n  get value(): string {\r\n    return this._formControl.value;\r\n  }\r\n  private _lastExternalInputValue: string | undefined;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-empty-function\r\n  onTouched: Function = (_: any) => { };\r\n\r\n  /** Reference to the MatLegacySelect options */\r\n  public set _options(_options: QueryList<MatLegacyOption> | null) {\r\n    this._options$.next(_options);\r\n  }\r\n  public get _options(): QueryList<MatLegacyOption> | null {\r\n    return this._options$.getValue();\r\n  }\r\n  public _options$: BehaviorSubject<QueryList<MatLegacyOption>|null> = new BehaviorSubject<QueryList<MatLegacyOption>|null>(null);\r\n\r\n  private optionsList$: Observable<MatLegacyOption[]> = this._options$.pipe(\r\n    switchMap(_options => _options ?\r\n      _options.changes.pipe(\r\n        map(options => options.toArray()),\r\n        startWith<MatLegacyOption[]>(_options.toArray()),\r\n      ) : of([])\r\n    )\r\n  );\r\n\r\n  private optionsLength$: Observable<number> = this.optionsList$.pipe(\r\n    map(options => options ? options.length : 0)\r\n  );\r\n\r\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\r\n  private previousSelectedValues!: any[];\r\n\r\n  public _formControl: FormControl<string> = new FormControl<string>('', {nonNullable: true});\r\n\r\n  /** whether to show the no entries found message */\r\n  public _showNoEntriesFound$: Observable<boolean> = combineLatest([\r\n    this._formControl.valueChanges,\r\n    this.optionsLength$\r\n  ]).pipe(\r\n    map(([value, optionsLength]) => {\r\n      const result: boolean = (!!this.noEntriesFoundLabel) && (!!value) && optionsLength === this.getOptionsLengthOffset();\r\n      return result;\r\n    })\r\n  );\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** Reference to active descendant for ARIA Support. */\r\n  private activeDescendant!: HTMLElement;\r\n  // private hostElement: Element,\r\n\r\n  constructor(\r\n    @Inject(MatLegacySelect) public matSelect: MatLegacySelect,\r\n    @Optional() @SkipSelf() @Host() private matOption: MatLegacyOption,\r\n    public changeDetectorRef: ChangeDetectorRef,\r\n    private _viewportRuler: ViewportRuler,\r\n    @Optional() @Inject(MatFormField) public matFormField: MatFormField | null = null,\r\n    @Optional() @Inject(MAT_SELECTSEARCH_DEFAULT_OPTIONS) defaultOptions?: MatSelectSearchOptions\r\n  ) {\r\n    this.applyDefaultOptions(defaultOptions);\r\n  }\r\n\r\n  private applyDefaultOptions(defaultOptions?: MatSelectSearchOptions) {\r\n    if (!defaultOptions) {\r\n      return;\r\n    }\r\n    for (const key of configurableDefaultOptions) {\r\n      // eslint-disable-next-line no-prototype-builtins\r\n      if (defaultOptions.hasOwnProperty(key)) {\r\n        (this[key] as any) = defaultOptions[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // set custom mat-option class if the component was placed inside a mat-option\r\n    if (this.matOption) {\r\n      this.matOption.disabled = true;\r\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\r\n      this.matOption._getHostElement().setAttribute('aria-hidden', 'true');\r\n    } else {\r\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\r\n    }\r\n\r\n    // when the select dropdown panel is opened or closed\r\n    this.matSelect.openedChange\r\n      .pipe(\r\n        delay(1),\r\n        takeUntil(this._onDestroy)\r\n      )\r\n      .subscribe((opened) => {\r\n        if (opened) {\r\n          this.updateInputWidth();\r\n          // focus the search field when opening\r\n          if (!this.disableInitialFocus) {\r\n            this._focus();\r\n          }\r\n        } else {\r\n          // clear it when closing\r\n          if (this.clearSearchInput) {\r\n            this._reset();\r\n          }\r\n        }\r\n      });\r\n\r\n    // set the first item active after the options changed\r\n    this.matSelect.openedChange\r\n      .pipe(\r\n        take(1),\r\n        switchMap((_) => {\r\n        this._options = this.matSelect.options;\r\n\r\n        // Closure variable for tracking the most recent first option.\r\n        // In order to avoid avoid causing the list to\r\n        // scroll to the top when options are added to the bottom of\r\n        // the list (eg: infinite scroll), we compare only\r\n        // the changes to the first options to determine if we\r\n        // should set the first item as active.\r\n        // This prevents unnecessary scrolling to the top of the list\r\n        // when options are appended, but allows the first item\r\n        // in the list to be set as active by default when there\r\n        // is no active selection\r\n        let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\r\n\r\n        return this._options.changes\r\n          .pipe(tap(() => {\r\n            // avoid \"expression has been changed\" error\r\n            setTimeout(() => {\r\n              // Convert the QueryList to an array\r\n              const options = this._options?.toArray() ?? [];\r\n\r\n              // The true first item is offset by 1\r\n              const currentFirstOption = options[this.getOptionsLengthOffset()];\r\n\r\n              const keyManager = this.matSelect._keyManager;\r\n              if (keyManager && this.matSelect.panelOpen) {\r\n\r\n                // set first item active and input width\r\n\r\n                // Check to see if the first option in these changes is different from the previous.\r\n                const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\r\n\r\n                // CASE: The first option is different now.\r\n                // Indiciates we should set it as active and scroll to the top.\r\n                if (firstOptionIsChanged\r\n                  || !keyManager.activeItem\r\n                  || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\r\n                  keyManager.setFirstItemActive();\r\n                }\r\n\r\n                // wait for panel width changes\r\n                setTimeout(() => {\r\n                  this.updateInputWidth();\r\n                });\r\n              }\r\n\r\n              // Update our reference\r\n              previousFirstOption = currentFirstOption;\r\n            });\r\n          }));\r\n        })\r\n      )\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe();\r\n\r\n    // add or remove css class depending on whether to show the no entries found message\r\n    // note: this is hacky\r\n    this._showNoEntriesFound$.pipe(\r\n      takeUntil(this._onDestroy)\r\n    ).subscribe(showNoEntriesFound => {\r\n      // set no entries found class on mat option\r\n      if (this.matOption) {\r\n        if (showNoEntriesFound) {\r\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\r\n        } else {\r\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\r\n        }\r\n      }\r\n    });\r\n\r\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\r\n    this._viewportRuler.change()\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        if (this.matSelect.panelOpen) {\r\n          this.updateInputWidth();\r\n        }\r\n      });\r\n\r\n    this.initMultipleHandling();\r\n\r\n    this.optionsList$.pipe(\r\n      takeUntil(this._onDestroy)\r\n    ).subscribe(() => {\r\n      // update view when available options change\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  _emitSelectAllBooleanToParent(state: boolean) {\r\n    this.toggleAll.emit(state);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  _isToggleAllCheckboxVisible(): boolean {\r\n    return (this.matSelect?.multiple) && this.showToggleAllCheckbox;\r\n  }\r\n\r\n  /**\r\n   * Handles the key down event with MatLegacySelect.\r\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\r\n   * @param event\r\n   */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\r\n    if ((event.key && event.key.length === 1) ||\r\n      (event.keyCode >= A && event.keyCode <= Z) ||\r\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\r\n      (event.keyCode === SPACE)\r\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\r\n    ) {\r\n      event.stopPropagation();\r\n    }\r\n\r\n    if ((this.matSelect?.multiple) && event.key && event.keyCode === ENTER) {\r\n      // Regain focus after multiselect, so we can further type\r\n      setTimeout(() => this._focus());\r\n    }\r\n\r\n    // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\r\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\r\n      this._reset(true);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the key up event with MatLegacySelect.\r\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\r\n   */\r\n  _handleKeyup(event: KeyboardEvent) {\r\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\r\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\r\n      const optionArray = this._options?.toArray() ?? [];\r\n      const index = optionArray.findIndex(item => item && item['id'] && item['id'] === ariaActiveDescendantId);\r\n      if (index !== -1) {\r\n        this.unselectActiveDescendant();\r\n        this.activeDescendant = optionArray[index]._getHostElement();\r\n        this.activeDescendant.setAttribute('aria-selected', 'true');\r\n        this.searchSelectInput.nativeElement.setAttribute('aria-activedescendant', ariaActiveDescendantId);\r\n      }\r\n    }\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    this._lastExternalInputValue = value;\r\n    this._formControl.setValue(value);\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  onBlur() {\r\n    this.unselectActiveDescendant();\r\n    this.onTouched();\r\n  }\r\n\r\n  registerOnChange(fn: (value: string) => void) {\r\n    this._formControl.valueChanges.pipe(\r\n      filter(value => value !== this._lastExternalInputValue),\r\n      tap(() => this._lastExternalInputValue = undefined),\r\n      takeUntil(this._onDestroy)\r\n    ).subscribe(fn);\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Focuses the search input field\r\n   */\r\n  public _focus() {\r\n    if (!this.searchSelectInput || !this.matSelect.panel) {\r\n      return;\r\n    }\r\n    // save and restore scrollTop of panel, since it will be reset by focus()\r\n    // note: this is hacky\r\n    const panel = this.matSelect.panel.nativeElement;\r\n    const scrollTop = panel.scrollTop;\r\n\r\n    // focus\r\n    this.searchSelectInput.nativeElement.focus();\r\n\r\n    panel.scrollTop = scrollTop;\r\n  }\r\n\r\n  /**\r\n   * Resets the current search value\r\n   * @param focus whether to focus after resetting\r\n   */\r\n  public _reset(focus?: boolean) {\r\n    this._formControl.setValue('');\r\n    if (focus) {\r\n      this._focus();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes handling <mat-select [multiple]=\"true\">\r\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\r\n   */\r\n  private initMultipleHandling() {\r\n    if (this.matSelect.ngControl === null) {\r\n      if (this.matSelect?.multiple) {\r\n        // note: the access to MatLegacySelect.ngControl (instead of MatLegacySelect.value / MatLegacySelect.valueChanges)\r\n        // is necessary to properly work in multi-selection mode.\r\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\r\n      }\r\n      return;\r\n    }\r\n    const valueChanges = this.matSelect.ngControl.valueChanges;\r\n    if (valueChanges === null) return;\r\n\r\n    // if <mat-select [multiple]=\"true\">\r\n    // store previously selected values and restore them when they are deselected\r\n    // because the option is not available while we are currently filtering\r\n    this.previousSelectedValues = this.matSelect.ngControl.value;\r\n\r\n    valueChanges\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe((values) => {\r\n        let restoreSelectedValues = false;\r\n        if (this.matSelect?.multiple) {\r\n          if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\r\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\r\n            if (!values || !Array.isArray(values)) {\r\n              values = [];\r\n            }\r\n            const optionValues = this.matSelect.options.map(option => option.value);\r\n\r\n            this.previousSelectedValues.forEach(previousValue => {\r\n\r\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n              if (!values.some((v: any) => this.matSelect.compareWith(v, previousValue))\r\n                && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\r\n\r\n                // if a value that was selected before is deselected and not found in the options, it was deselected\r\n                // due to the filtering, so we restore it.\r\n                values.push(previousValue);\r\n                restoreSelectedValues = true;\r\n              }\r\n            });\r\n          }\r\n        }\r\n        this.previousSelectedValues = values;\r\n\r\n        if (restoreSelectedValues) {\r\n          this.matSelect._onChange(values);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\r\n   *  And support all Operation Systems\r\n   */\r\n  public updateInputWidth() {\r\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\r\n      return;\r\n    }\r\n    let element: HTMLElement | null = this.innerSelectSearch.nativeElement;\r\n    let panelElement: HTMLElement | undefined;\r\n    while ((element = element?.parentElement ?? null) !== null) {\r\n      if (element.classList.contains('mat-select-panel')) {\r\n        panelElement = element;\r\n        break;\r\n      }\r\n    }\r\n    if (panelElement) {\r\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine the offset to length that can be caused by the optional MatLegacyOption used as a search input.\r\n   */\r\n  private getOptionsLengthOffset(): number {\r\n    if (this.matOption) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  private unselectActiveDescendant() {\r\n    this.activeDescendant?.removeAttribute('aria-selected');\r\n    this.searchSelectInput.nativeElement.removeAttribute('aria-activedescendant');\r\n  }\r\n\r\n}\r\n","<!--\r\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n\r\nUse of this source code is governed by an MIT-style license that can be\r\nfound in the LICENSE file at https://angular.io/license\r\n-->\r\n<!-- Placeholder to adjust vertical offset of the mat-option elements -->\r\n<input matInput class=\"mat-select-search-input mat-select-search-hidden\"/>\r\n\r\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\r\n<div\r\n      #innerSelectSearch\r\n      class=\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\"\r\n      [ngClass]=\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\">\r\n\r\n  <mat-checkbox *ngIf=\"_isToggleAllCheckboxVisible()\"\r\n                [color]=\"matFormField?.color\"\r\n                class=\"mat-select-search-toggle-all-checkbox\"\r\n                [checked]=\"toggleAllCheckboxChecked\"\r\n                [indeterminate]=\"toggleAllCheckboxIndeterminate\"\r\n                [matTooltip]=\"toggleAllCheckboxTooltipMessage\"\r\n                matTooltipClass=\"ngx-mat-select-search-toggle-all-tooltip\"\r\n                [matTooltipPosition]=\"toggleAllCheckboxTooltipPosition\"\r\n                (change)=\"_emitSelectAllBooleanToParent($event.checked)\"\r\n  ></mat-checkbox>\r\n\r\n  <input class=\"mat-select-search-input\"\r\n         autocomplete=\"off\"\r\n         [type]=\"type\"\r\n         [formControl]=\"_formControl\"\r\n         #searchSelectInput\r\n         (keydown)=\"_handleKeydown($event)\"\r\n         (keyup)=\"_handleKeyup($event)\"\r\n         (blur)=\"onBlur()\"\r\n         [placeholder]=\"placeholderLabel\"\r\n         [attr.aria-label]=\"ariaLabel\"\r\n  />\r\n  <mat-spinner *ngIf=\"searching\"\r\n          class=\"mat-select-search-spinner\"\r\n          diameter=\"16\"></mat-spinner>\r\n\r\n  <button *ngIf=\"!hideClearSearchButton && value && !searching\"\r\n          mat-icon-button\r\n          aria-label=\"Clear\"\r\n          (click)=\"_reset(true)\"\r\n          class=\"mat-select-search-clear\">\r\n    <ng-content *ngIf=\"clearIcon; else defaultIcon\" select=\"[ngxMatSelectSearchClear]\"></ng-content>\r\n    <ng-template #defaultIcon>\r\n      <mat-icon [svgIcon]=\"closeSvgIcon ?? ''\">\r\n        {{!closeSvgIcon ? closeIcon : null}}\r\n      </mat-icon>\r\n    </ng-template>\r\n  </button>\r\n\r\n  <ng-content select=\".mat-select-search-custom-header-content\"></ng-content>\r\n\r\n  <mat-divider></mat-divider>\r\n</div>\r\n\r\n<div *ngIf=\"_showNoEntriesFound$ | async\"\r\n     class=\"mat-select-search-no-entries-found\">\r\n  <ng-content *ngIf=\"noEntriesFound; else defaultNoEntriesFound\"\r\n              select=\"[ngxMatSelectNoEntriesFound]\"></ng-content>\r\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\r\n</div>\r\n","/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { MatSelectSearchComponent } from './mat-select-search.component';\r\nimport { MatLegacyButtonModule as MatButtonModule } from '@angular/material/legacy-button';\r\nimport { MatLegacyCheckboxModule as MatCheckboxModule } from '@angular/material/legacy-checkbox';\r\nimport { MatLegacyProgressSpinnerModule as MatProgressSpinnerModule } from '@angular/material/legacy-progress-spinner';\r\nimport { MatLegacyTooltipModule as MatTooltipModule } from '@angular/material/legacy-tooltip';\r\nimport { MatLegacySelectModule } from '@angular/material/legacy-select';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSelectNoEntriesFoundDirective } from './mat-select-no-entries-found.directive';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\nexport const MatSelectSearchVersion = '6.0.6';\r\nexport { MatSelectSearchClearDirective };\r\nexport { MatSelectNoEntriesFoundDirective };\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatTooltipModule,\r\n    MatLegacySelectModule,\r\n    MatDividerModule,\r\n  ],\r\n  declarations: [\r\n    MatSelectSearchComponent,\r\n    MatSelectSearchClearDirective,\r\n    MatSelectNoEntriesFoundDirective\r\n  ],\r\n  exports: [\r\n    MatSelectSearchComponent,\r\n    MatSelectSearchClearDirective,\r\n    MatSelectNoEntriesFoundDirective\r\n  ]\r\n})\r\nexport class NgxMatSelectSearchModule {\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"names":["VERSION","MatSelectSearchVersion","AppComponent","constructor","version","matSelectSearchVersion","rightToLeft","toggleRightToLeft","document","body","dir","_","_2","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","AppComponent_Template_mat_slide_toggle_ngModelChange_27_listener","ɵɵadvance","ɵɵtextInterpolate1","full","BrowserModule","BrowserAnimationsModule","CommonModule","FormsModule","ReactiveFormsModule","MatIconModule","MatLegacyButtonModule","MatLegacyFormFieldModule","MatLegacySelectModule","MatToolbarModule","NgxMatSelectSearchModule","SingleSelectionExampleComponent","MultipleSelectionExampleComponent","CustomClearIconExampleComponent","OptionGroupsExampleComponent","ServerSideSearchExampleComponent","MultipleSelectionSelectAllExampleComponent","TooltipSelectAllExampleComponent","InfiniteScrollExampleComponent","CustomNoEntriesFoundExampleComponent","MatSlideToggleModule","MatSelectSearchTestComponent","AppModule","bootstrap","_3","declarations","imports","exports","FormControl","ReplaySubject","Subject","take","takeUntil","BANKS","ɵɵproperty","bank_r2","name","banks","bankCtrl","bankFilterCtrl","nonNullable","filteredBanks","_onDestroy","ngOnInit","setValue","next","slice","valueChanges","pipe","subscribe","filterBanks","ngAfterViewInit","setInitialValue","ngOnDestroy","complete","singleSelect","compareWith","a","b","id","search","value","toLowerCase","filter","bank","indexOf","viewQuery","SingleSelectionExampleComponent_Query","ɵɵtemplate","SingleSelectionExampleComponent_mat_option_8_Template","ɵɵpipeBind1","bank_r3","ɵɵtextInterpolate","bank_r4","bankMultiCtrl","bankMultiFilterCtrl","filteredBanksMulti","filterBanksMulti","multiSelect","MultipleSelectionExampleComponent_Query","MultipleSelectionExampleComponent_mat_option_8_Template","MultipleSelectionExampleComponent_ul_12_Template","ctx_r1","t","features","ɵɵInheritDefinitionFeature","CustomClearIconExampleComponent_Template","CustomClearIconExampleComponent_ngx_mat_select_search_7_Template","CustomClearIconExampleComponent_mat_option_8_Template","BANKGROUPS","OptionGroupsExampleComponent_mat_optgroup_8_mat_option_1_Template","group_r2","bankGroups","bankGroupsCtrl","bankGroupsFilterCtrl","filteredBankGroups","copyBankGroups","filterBankGroups","bankGroupsCopy","bankGroup","showBankGroup","length","forEach","push","OptionGroupsExampleComponent_Template","OptionGroupsExampleComponent_mat_optgroup_8_Template","debounceTime","delay","tap","map","bank_r1","bankServerSideCtrl","bankServerSideFilteringCtrl","searching","filteredServerSideBanks","error","ServerSideSearchExampleComponent_Template","ServerSideSearchExampleComponent_mat_option_7_Template","filteredBanksCache","isIndeterminate","isChecked","setToggleAllCheckboxState","toggleSelectAll","selectAllValue","val","patchValue","filteredLength","el","MultipleSelectionSelectAllExampleComponent_Query","MultipleSelectionSelectAllExampleComponent_Template_ngx_mat_select_search_toggleAll_7_listener","$event","MultipleSelectionSelectAllExampleComponent_mat_option_8_Template","MultipleSelectionSelectAllExampleComponent_ul_12_Template","tooltipMessage","TooltipSelectAllExampleComponent_Query","TooltipSelectAllExampleComponent_Template_ngx_mat_select_search_toggleAll_7_listener","TooltipSelectAllExampleComponent_mat_option_8_Template","combineLatest","merge","mapTo","scan","startWith","searchCtrl","mockBankList","Array","from","i","String","filteredData$","searchKeyword","batchSize","incrementBatchOffset$","resetBatchOffset$","minimumBatchOffset$","filteredData","searchValue","index","findIndex","batchOffset$","batchOffset","doIncrement","minimumOffset","Math","max","filteredBatchedData$","destroy$","infiniteScrollSelect","openedChange","opened","getNextBatch","InfiniteScrollExampleComponent_Query","InfiniteScrollExampleComponent_Template_mat_select_infiniteScroll_7_listener","InfiniteScrollExampleComponent_mat_option_12_Template","CustomNoEntriesFoundExampleComponent_Query","CustomNoEntriesFoundExampleComponent_ngx_mat_select_search_7_Template","CustomNoEntriesFoundExampleComponent_mat_option_8_Template","InjectionToken","configurableDefaultOptions","MAT_SELECTSEARCH_DEFAULT_OPTIONS","MatSelectNoEntriesFoundDirective","MatSelectSearchClearDirective","UntypedFormControl","bank_r10","bank_r11","bank_r12","bank_r13","bankCtrlMatOption","bankFilterCtrlMatOption","filteredBanksMatOption","initialSingleSelection","initialSingleSelectionMatOption","initialMultiSelection","filterBanksMatOption","matSelect","matSelectMatOption","matSelectMulti","MatSelectSearchTestComponent_Query","MatSelectSearchTestComponent_mat_option_9_Template","MatSelectSearchTestComponent_mat_option_22_Template","MatSelectSearchTestComponent_mat_option_35_Template","MatSelectSearchTestComponent_ul_39_Template","A","DOWN_ARROW","END","ENTER","ESCAPE","HOME","NINE","SPACE","UP_ARROW","Z","ZERO","ElementRef","EventEmitter","forwardRef","NG_VALUE_ACCESSOR","MatLegacyFormField","MatFormField","MatLegacySelect","BehaviorSubject","of","switchMap","MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener","ɵɵrestoreView","_r7","ctx_r6","ɵɵnextContext","ɵɵresetView","_emitSelectAllBooleanToParent","checked","matFormField","color","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toggleAllCheckboxTooltipPosition","ɵɵprojection","tmp_0_0","ctx_r10","closeSvgIcon","undefined","closeIcon","MatSelectSearchComponent_button_7_Template_button_click_0_listener","_r12","ctx_r11","_reset","MatSelectSearchComponent_button_7_ng_content_1_Template","MatSelectSearchComponent_button_7_ng_template_2_Template","ɵɵtemplateRefExtractor","ctx_r4","clearIcon","_r9","ctx_r15","noEntriesFoundLabel","MatSelectSearchComponent_div_10_ng_content_1_Template","MatSelectSearchComponent_div_10_ng_template_2_Template","ctx_r5","noEntriesFound","_r14","MatSelectSearchComponent","_formControl","_options","_options$","getValue","matOption","changeDetectorRef","_viewportRuler","defaultOptions","placeholderLabel","type","clearSearchInput","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","toggleAll","onTouched","optionsList$","changes","options","toArray","optionsLength$","_showNoEntriesFound$","optionsLength","result","getOptionsLengthOffset","applyDefaultOptions","key","hasOwnProperty","disabled","_getHostElement","classList","add","setAttribute","console","updateInputWidth","_focus","previousFirstOption","setTimeout","currentFirstOption","keyManager","_keyManager","panelOpen","firstOptionIsChanged","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","change","initMultipleHandling","markForCheck","state","emit","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","keyCode","stopPropagation","_handleKeyup","ariaActiveDescendantId","_getAriaActiveDescendant","optionArray","item","unselectActiveDescendant","activeDescendant","searchSelectInput","nativeElement","writeValue","_lastExternalInputValue","onBlur","registerOnChange","fn","registerOnTouched","panel","scrollTop","focus","ngControl","previousSelectedValues","values","restoreSelectedValues","isArray","optionValues","previousValue","some","v","_onChange","innerSelectSearch","element","panelElement","parentElement","contains","style","width","clientWidth","removeAttribute","ɵɵdirectiveInject","i1","MatLegacyOption","ChangeDetectorRef","i2","ViewportRuler","contentQueries","MatSelectSearchComponent_ContentQueries","dirIndex","provide","useExisting","multi","ngContentSelectors","_c4","MatSelectSearchComponent_Template","MatSelectSearchComponent_mat_checkbox_3_Template","MatSelectSearchComponent_Template_input_keydown_4_listener","MatSelectSearchComponent_Template_input_keyup_4_listener","MatSelectSearchComponent_Template_input_blur_4_listener","MatSelectSearchComponent_mat_spinner_6_Template","MatSelectSearchComponent_button_7_Template","MatSelectSearchComponent_div_10_Template","ɵɵpureFunction2","_c3","ɵɵattribute","MatButtonModule","MatLegacyCheckboxModule","MatCheckboxModule","MatLegacyProgressSpinnerModule","MatProgressSpinnerModule","MatLegacyTooltipModule","MatTooltipModule","MatDividerModule","environment","production","enableProdMode","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err","log"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}